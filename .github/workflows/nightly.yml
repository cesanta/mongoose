name: Full build and test
on:
  schedule:
    - cron: '0 22 * * *' # run at 10 PM UTC
  # Allow manual runs
  workflow_dispatch:
env:
  IPV6: 0
jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cc: [gcc, clang, g++, clang++]
        target: [test]
        ssl: ["", BUILTIN, MBEDTLS, OPENSSL, WOLFSSL]
        select: ["-DMG_ENABLE_POLL=0 -DMG_ENABLE_EPOLL=0", "-DMG_ENABLE_POLL=1 -DMG_ENABLE_EPOLL=0", "-DMG_ENABLE_POLL=0 -DMG_ENABLE_EPOLL=1"]
        exclude:
        - ssl: MBEDTLS
          select: "-DMG_ENABLE_POLL=0 -DMG_ENABLE_EPOLL=0"
        - ssl: MBEDTLS
          select: "-DMG_ENABLE_POLL=1 -DMG_ENABLE_EPOLL=0"
        - ssl: OPENSSL
          select: "-DMG_ENABLE_POLL=0 -DMG_ENABLE_EPOLL=0"
        - ssl: OPENSSL
          select: "-DMG_ENABLE_POLL=1 -DMG_ENABLE_EPOLL=0"
        - ssl: WOLFSSL
          select: "-DMG_ENABLE_POLL=0 -DMG_ENABLE_EPOLL=0"
        - ssl: WOLFSSL
          select: "-DMG_ENABLE_POLL=1 -DMG_ENABLE_EPOLL=0"
    name: linux ${{ matrix.target }} CC=${{ matrix.cc }} SSL=${{ matrix.ssl }} TFLAGS=${{ matrix.select }}
    env:
      CC: ${{ matrix.cc }}
      SSL: ${{ matrix.ssl }}
      TFLAGS: ${{ matrix.select }} -DMQTT_LOCALHOST -DNO_ABORT
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - uses: webfactory/ssh-agent@v0.9.1
      with:
            ssh-private-key: ${{ secrets.HEALTH_TESTS_SSH_KEY }}
    - run: sudo apt -y update ; sudo apt -y install libmbedtls-dev libwolfssl-dev && test/setup_mqtt_server.sh && make -C test ${{ matrix.target }} > log
    - if: success() || failure()
      run: |
        cat log
        test/health.awk < log > json
        scp -o "StrictHostKeyChecking=no" json "root@176.9.217.245:/data/downloads/health/linux_${{ matrix.target }}_${{ matrix.cc }}_${{ matrix.ssl }}_${{ matrix.select }}_$(date +"%Y%m%d").json"
  mip:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cc: [gcc, clang, g++, clang++]
        target: [mip_test, mip_tap_test]
        ssl: ["", BUILTIN, MBEDTLS, OPENSSL, WOLFSSL]
        # #3226: built-in TCP is currently not working with WolfSSL (builds fine)
        exclude:
        - ssl: WOLFSSL
          target: mip_tap_test
    name: ${{ matrix.target }} CC=${{ matrix.cc }} SSL=${{ matrix.ssl }}
    env:
      CC: ${{ matrix.cc }}
      SSL: ${{ matrix.ssl }}
      TFLAGS: -DMQTT_LOCALHOST -DNO_ABORT
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - uses: webfactory/ssh-agent@v0.9.1
      with:
            ssh-private-key: ${{ secrets.HEALTH_TESTS_SSH_KEY }}
    - run: if [ "${{ matrix.target }}" == "mip_tap_test" ]; then ./test/setup_ga_network.sh ; fi && sudo apt -y update ; sudo apt -y install libmbedtls-dev libwolfssl-dev && make -C test ${{ matrix.target }} IPV6=0 > log
    - if: success() || failure()
      run: |
        cat log
        test/health.awk < log > json
        scp -o "StrictHostKeyChecking=no" json "root@176.9.217.245:/data/downloads/health/${{ matrix.target }}_${{ matrix.cc }}_${{ matrix.ssl }}_$(date +"%Y%m%d").json"

  mip89:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1   # no parallel runs, to minimize MQTT errors
      matrix:
        target: [mip_vc98]
    name: mip89 ${{ matrix.target }}
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - run: make -C test ${{ matrix.target }} 
  s390:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ssl: ["", BUILTIN]
    name: S390 SSL=${{ matrix.ssl }}
    env:
      TFLAGS: -DMQTT_LOCALHOST
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - run: sudo apt -y update ; sudo apt -y install binfmt-support qemu-user-static && ./test/setup_mqtt_server.sh && docker run --rm --privileged multiarch/qemu-user-static --reset -p yes && make -C test s390 SSL=${{ matrix.ssl }} MULTIREC=NO
  armhf:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ssl: ["", BUILTIN]
    name: ArmHF SSL=${{ matrix.ssl }}
    env:
      TFLAGS: -DMQTT_LOCALHOST
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - run: sudo apt -y update ; sudo apt -y install binfmt-support qemu-user-static && ./test/setup_mqtt_server.sh && docker run --rm --privileged multiarch/qemu-user-static --reset -p yes && make -C test armhf SSL=${{ matrix.ssl }} MULTIREC=NO
  unamalgamated-mg_prefix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ssl: ["", BUILTIN, MBEDTLS, OPENSSL, WOLFSSL]
    name: unamalgamated-mg_prefix SSL=${{ matrix.ssl }}
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - run: sudo apt -y update ; sudo apt -y install libmbedtls-dev libwolfssl-dev
    - run: make -C test unamalgamated SSL=${{ matrix.ssl }} && make -C test mg_prefix
  valgrind:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ssl: ["", BUILTIN, MBEDTLS, OPENSSL, WOLFSSL]
    name: Valgrind SSL=${{ matrix.ssl }}
    env:
      TFLAGS: -DMQTT_LOCALHOST
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - run: sudo apt -y update ; sudo apt -y install libmbedtls-dev libwolfssl-dev valgrind
    - run: ./test/setup_mqtt_server.sh && make -C test valgrind SSL=${{ matrix.ssl }}
  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        # Mongoose does not work with WolfSSL version in MacOS
        ssl: ["", BUILTIN, MBEDTLS, OPENSSL] # , WOLFSSL]
        select: [-DMG_ENABLE_POLL=0, -DMG_ENABLE_POLL=1]
        include:
        - ssl: MBEDTLS
          env:
            # MbedTLS version in MacOS refuses to validate a certificate without a hostname, causing MQTT tests to fail when using MQTT_LOCALHOST
            tflags: -DNO_MQTT_TESTS 
        exclude:
        - ssl: MBEDTLS
          select: -DMG_ENABLE_POLL=0
        - ssl: OPENSSL
          select: -DMG_ENABLE_POLL=0
        #- ssl: WOLFSSL
        #  select: -DMG_ENABLE_POLL=0
    name: macos SSL=${{ matrix.ssl }} TFLAGS=${{ matrix.select }}
    env:
      SSL: ${{ matrix.ssl }}
      TFLAGS: ${{ matrix.select }} -DMQTT_LOCALHOST ${{ matrix.env.tflags }} -Wno-sign-conversion # Workaround for MbedTLS 3.5.0
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - uses: webfactory/ssh-agent@v0.9.1
      with:
            ssh-private-key: ${{ secrets.HEALTH_TESTS_SSH_KEY }}
    - run: brew install mbedtls wolfssl mosquitto gawk # jq openssl already pre-installed
    - run: /opt/homebrew/opt/mosquitto/sbin/mosquitto -c /Users/runner/work/mongoose/mongoose/test/mosquitto.conf.macos &
    - run: make -C test test ASAN_OPTIONS= MBEDTLS=$(echo $(brew --cellar)/mbedtls*/*) OPENSSL=$(echo $(brew --cellar)/openssl*/*) WOLFSSL=$(echo $(brew --cellar)/wolfssl*/*) > log
    - if: success() || failure()
      run: |
        cat log
        test/health.awk < log > json
        scp -o "StrictHostKeyChecking=no" json "root@176.9.217.245:/data/downloads/health/macos_test_cc_${{ matrix.ssl }}_${{ matrix.select }}_$(date +"%Y%m%d").json"

  windows:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1   # no parallel runs, to minimize MQTT errors
      matrix:
        target: [vc98, vc17, vc22, mingw, mingw++]
        ssl: ["", BUILTIN]
        select: [-DMG_ENABLE_POLL=0, -DMG_ENABLE_POLL=1]
        exclude:
        - target: vc98
          select: -DMG_ENABLE_POLL=1
    name: windows ${{ matrix.target }} SSL=${{ matrix.ssl }} TFLAGS=${{ matrix.select }}
    env:
      SSL: ${{ matrix.ssl }}
      TFLAGS: ${{ matrix.select }} -DMQTT_LOCALHOST
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - uses: webfactory/ssh-agent@v0.9.1
      with:
            ssh-private-key: ${{ secrets.HEALTH_TESTS_SSH_KEY }}
    - run: ./test/setup_mqtt_server.sh && make -C test ${{ matrix.target }} > log
    - if: success() || failure()
      run: |
        cat log
        test/health.awk < log > json
        scp -o "StrictHostKeyChecking=no" json "root@176.9.217.245:/data/downloads/health/windows_${{ matrix.target }}_${{ matrix.cc }}_${{ matrix.ssl }}_${{ matrix.select }}_$(date +"%Y%m%d").json"
 
  arm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ssl: ["", BUILTIN]
    name: Arm SSL=${{ matrix.ssl }}
    steps:
    - uses: actions/checkout@v4
    - run: make -C test arm SSL=${{ matrix.ssl }}
  riscv:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ssl: ["", BUILTIN]
    name: RISC-V SSL=${{ matrix.ssl }}
    steps:
    - uses: actions/checkout@v4
    - run: make -C test riscv SSL=${{ matrix.ssl }}

  tutorials:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ssl: [-DMG_TLS=MG_TLS_NONE, -DMG_TLS=MG_TLS_BUILTIN]
    name: tutorials ${{ matrix.ssl }}
    steps:
    - uses: actions/checkout@v4
    - uses: webfactory/ssh-agent@v0.9.1
      with:
            ssh-private-key: ${{ secrets.HEALTH_TESTS_SSH_KEY }}
    - run: sudo apt -y install libpcap-dev
    - run: make -C test tutorials CFLAGS_EXTRA="${{ matrix.ssl }}" > log
    - if: success() || failure()
      run: |
        cat log
        test/health.awk < log > json
        scp -o "StrictHostKeyChecking=no" json "root@176.9.217.245:/data/downloads/health/tutorials_${{ matrix.ssl }}_$(date +"%Y%m%d").json"
    - run: make -C test clean_tutorials

  tutorials_win:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        ssl: [-DMG_TLS=MG_TLS_NONE, -DMG_TLS=MG_TLS_BUILTIN]
    name: tutorials_win ${{ matrix.ssl }}
    steps:
    - uses: actions/checkout@v4
#    - uses: egor-tensin/setup-mingw@v2
#      with:
#        platform: x64
    - name: test they build
      run: make -C test tutorials_win CFLAGS_EXTRA="${{ matrix.ssl }}"
      shell: cmd
    - name: test they clean
      run: make -C test clean_tutorials_win
      shell: cmd
  tutorials_mac:
    runs-on: macos-latest
    env: { HOMEBREW_NO_AUTO_UPDATE: 1 }
    strategy:
      fail-fast: false
      matrix:
        ssl: [-DMG_TLS=MG_TLS_NONE, -DMG_TLS=MG_TLS_BUILTIN]
    name: tutorials_mac ${{ matrix.ssl }}
    steps:
    - uses: actions/checkout@v4
    - run: make -C test tutorials_mac CFLAGS_EXTRA="${{ matrix.ssl }}"
    - run: make -C test clean_tutorials_mac


  arduino:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - run: echo # nothing specific to install or do
    - run: make -C test/arduino
    - run: make -C test/arduino cleanall


#  wizard_examples:
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        example:
#          - path: esp32/esp32-idf
#    name: ${{ matrix.example.path }}
#    env:
#      GO: 0
#    steps:
#      - uses: actions/checkout@v4
#        with: { fetch-depth: 2 }
#      - run: echo # nothing specific to install or do
#          fi
#      - run: make -C tutorials/${{ matrix.example.path }} build

  wizard_examples_arm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example:
          - path: infineon/xmc47_relax-make-baremetal-builtin
          - path: infineon/xmc_plt2go_4400-make-baremetal-builtin
          - path: infineon/xmc72_evk-make-baremetal-builtin
          - path: nxp/frdm-mcxn947-make-baremetal-builtin
          - path: nxp/frdm-mcxn947-make-freertos-builtin
          - path: nxp/rt1020-evk-make-baremetal-builtin
          - path: nxp/rt1060-evk-make-baremetal-builtin
          - path: nxp/rt1170-evk-make-baremetal-builtin
          - path: pico-sdk/pico-w-picosdk-baremetal-builtin
          - path: pico-sdk/pico-2-w-picosdk-baremetal-builtin
          - path: pico-sdk/w5500-evb-pico-picosdk-baremetal-builtin
          - path: pico-sdk/w5500-evb-pico2-picosdk-baremetal-builtin
          - path: stm32/nucleo-f429zi-make-baremetal-builtin
          - path: stm32/nucleo-f429zi-make-freertos-builtin
          - path: stm32/nucleo-f746zg-make-baremetal-builtin
          - path: stm32/nucleo-f746zg-make-freertos-builtin
          - path: stm32/nucleo-h563zi-make-baremetal-builtin
          - path: stm32/nucleo-h563zi-make-freertos-builtin
          - path: stm32/nucleo-h723zg-make-baremetal-builtin
          - path: stm32/nucleo-h723zg-make-freertos-builtin
          - path: stm32/nucleo-h743zi-make-baremetal-builtin
          - path: stm32/nucleo-h743zi-make-freertos-builtin
          - path: stm32/stm32h573i-dk-make-baremetal-builtin
          - path: stm32/stm32h573i-dk-make-freertos-builtin
          - path: ti/ek-tm4c1294xl-make-baremetal-builtin
          - path: ti/ek-tm4c1294xl-make-freertos-builtin
    name: ${{ matrix.example.path }}
    env:
      GO: 0
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
      - run: make -C tutorials/${{ matrix.example.path }} build


  generic_examples:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example:
          - path: micropython/esp32
          - path: http/uart-bridge/esp32
          - path: http/http-client/esp8266/http-client-server
    name: ${{ matrix.example.path }}
    env:
      GO: 0
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - run: echo # nothing specific to install or do
      - run: make -C tutorials/${{ matrix.example.path }} build
  
  generic_examples_arm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example:
          - path: mqtt/mqtt-client/microchip/same54-xpro
          - path: nxp/nxp-frdmk66f-freertos
          - path: nxp/nxp-lpcxpresso54s018m-freertos
          - path: nxp/nxp-mimxrt1020-freertos
          - path: nxp/nxp-evkbimxrt1050-lwip-freertos
          - path: nxp/nxp-evkmimxrt1020-lwip-freertos
          - path: nxp/nxp-evkmimxrt1024-lwip-freertos
          - path: nxp/nxp-evkmimxrt1060-lwip-freertos
          - path: nxp/nxp-evkmimxrt1064-lwip-freertos
          - path: nxp/nxp-evkmimxrt1160-cm7-lwip-freertos
          - path: nxp/nxp-evkmimxrt1170-cm7-lwip-freertos
          - path: nxp/nxp-frdmk64f-lwip-freertos
          - path: nxp/nxp-frdmk66f-lwip-freertos
          - path: nxp/nxp-lpcxpresso54018-lwip-freertos
          - path: nxp/nxp-lpcxpresso54608-lwip-freertos
          - path: nxp/nxp-lpcxpresso54618-lwip-freertos
          - path: nxp/nxp-lpcxpresso54628-lwip-freertos
          - path: nxp/nxp-twrk65f180m-lwip-freertos
          - path: nxp/nxp-twrkv58f220m-lwip-freertos
          - path: pico-sdk/pico-rmii
          - path: stm32/nucleo-f429zi-make-baremetal-builtin-rndis
          - path: stm32/nucleo-f746zg-make-baremetal-builtin-rndis
          - path: stm32/nucleo-g031-make-baremetal-builtin
          - path: ti/ti-ek-tm4c1294xl-http-server
          - path: ti/ek-tm4c1294xl-make-baremetal-builtin-rndis
    name: ${{ matrix.example.path }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
      - run: make -C tutorials/${{ matrix.example.path }} build

  device_dashboard_examples:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example:
          - path: esp32
    name: ${{ matrix.example.path }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - run: echo # nothing specific to install or do
      - run: make -C tutorials/http/device-dashboard/${{ matrix.example.path }} build


  device_dashboard_examples_arm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ssl: ["", -DMG_TLS=MG_TLS_BUILTIN]
        example:
          - path: http/device-dashboard/microchip/same54-xpro
          - path: nxp/rt1020-evk-make-freertos-builtin
          - path: nxp/rt1060-evk-make-freertos-builtin
          - path: nxp/rt1170-evk-make-freertos-builtin
          - path: renesas/ek-ra6m4-make-baremetal-builtin
          - path: pico-sdk/pico-rndis-dashboard
          - path: pico-sdk/pico-w-picosdk-freertos-lwip
          - path: pico-sdk/pico-2-w-picosdk-freertos-lwip
          - path: stm32/nucleo-f746zg-make-freertos-tcp
          - path: stm32/nucleo-f746zg-make-baremetal-builtin-cmsis_driver
    name: ${{ matrix.example.path }} ${{ matrix.ssl }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
      - run: make -C tutorials/${{ matrix.example.path }} build CFLAGS_EXTRA="${{ matrix.ssl }}"

#  mqtt_dashboard_examples:
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        example:
#          - path: 
#    name: ${{ matrix.example.path }}
#    steps:
#      - uses: actions/checkout@v4
#        with: { fetch-depth: 2 }
#      - run: echo # nothing specific to install or do
#      - run: make -C tutorials/${{ matrix.example.path }} build
      
  mqtt_dashboard_examples_arm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example:
          - path: pico-sdk/pico-rndis-device
    name: ${{ matrix.example.path }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
      - run: make -C tutorials/${{ matrix.example.path }} build
      
#  dual_examples:
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        example:
#          - path: 
#    name: ${{ matrix.example.path }}
#    steps:
#      - uses: actions/checkout@v4
#        with: { fetch-depth: 2 }
#      - run: echo # nothing specific to install or do
#      - run: make -C tutorials/${{ matrix.example.path }} device_dashboard
#      - run: make -C tutorials/${{ matrix.example.path }} mqtt_dashboard

  cube_examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - run: sudo pip install yq
      - run: cd test/cube && make

  test_f7:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - name: baremetal
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run: make -C tutorials/stm32/nucleo-f746zg-make-baremetal-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - run: make -C tutorials/stm32/nucleo-f746zg-make-freertos-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - run: make -C tutorials/stm32/nucleo-f746zg-make-freertos-tcp test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - name: Cube
      run: echo # nothing specific to install or do
#    - run: make -C test/cube PROJECTS=../../tutorials/stm32/nucleo-f746zg-cube-baremetal-builtin VCON_API_KEY=${{secrets.VCON_API_KEY}} DEVICE=5
#    - run: make -C test/cube PROJECTS=../../tutorials/stm32/nucleo-f746zg-cube-freertos-builtin VCON_API_KEY=${{secrets.VCON_API_KEY}} DEVICE=5    
    - run: make -C test/cube PROJECTS=../../tutorials/stm32/nucleo-f746zg-cube-freertos-lwip VCON_API_KEY=${{secrets.VCON_API_KEY}} DEVICE=5

  test_f4:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - name: baremetal
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run: make -C tutorials/stm32/nucleo-f429zi-make-baremetal-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - run: make -C tutorials/stm32/nucleo-f429zi-make-freertos-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - name: Cube
      run: echo # nothing specific to install or do
#    - run: make -C test/cube PROJECTS=../../tutorials/stm32/nucleo-f429zi-cube-baremetal-builtin VCON_API_KEY=${{secrets.VCON_API_KEY}} DEVICE=2
#    - run: make -C test/cube PROJECTS=../../tutorials/stm32/nucleo-f429zi-cube-freertos-builtin VCON_API_KEY=${{secrets.VCON_API_KEY}} DEVICE=2
    - run: make -C test/cube PROJECTS=../../tutorials/stm32/nucleo-f429zi-cube-freertos-lwip VCON_API_KEY=${{secrets.VCON_API_KEY}} DEVICE=2

  test_h743:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 3 }
    - name: baremetal
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run: make -C tutorials/stm32/nucleo-h743zi-make-baremetal-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - run: make -C tutorials/stm32/nucleo-h743zi-make-freertos-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
#    - name: Cube
#      run: echo # nothing specific to install or do
#    - run: make -C test/cube PROJECTS=../../tutorials/stm32/nucleo-h743zi-cube-baremetal-builtin VCON_API_KEY=${{secrets.VCON_API_KEY}} DEVICE=6
#    - run: make -C test/cube PROJECTS=../../tutorials/stm32/nucleo-h743zi-cube-freertos-builtin VCON_API_KEY=${{secrets.VCON_API_KEY}} DEVICE=6

  test_h723:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 3 }
    - name: baremetal
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run: make -C tutorials/stm32/nucleo-h723zg-make-baremetal-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - run: make -C tutorials/stm32/nucleo-h723zg-make-freertos-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    
  test_h5:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 3 }
    - name: baremetal
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run: make -C tutorials/stm32/nucleo-h563zi-make-baremetal-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - run: make -C tutorials/stm32/nucleo-h563zi-make-freertos-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}

  test_rt1020:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 3 }
    - name: baremetal
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run: make -C tutorials/nxp/rt1020-evk-make-baremetal-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - run: make -C tutorials/nxp/rt1020-evk-make-freertos-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}

  test_rt1060:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 3 }
    - name: baremetal
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run: make -C tutorials/nxp/rt1060-evk-make-baremetal-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - run: make -C tutorials/nxp/rt1060-evk-make-freertos-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}

  test_rt1170:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 3 }
    - name: baremetal
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run: make -C tutorials/nxp/rt1170-evk-make-baremetal-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - run: make -C tutorials/nxp/rt1170-evk-make-freertos-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}

  test_ra6m4:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 3 }
    - name: baremetal
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run: make -C tutorials/renesas/ek-ra6m4-make-baremetal-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
#    - run: make -C tutorials/renesas/ek-ra6m4-make-freertos-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}

  test_tm4c:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - name: baremetal
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run:  make -C tutorials/ti/ek-tm4c1294xl-make-baremetal-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - run:  make -C tutorials/ti/ek-tm4c1294xl-make-freertos-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}

  test_same54:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - name: baremetal
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run:  make -C tutorials/http/device-dashboard/microchip/same54-xpro test VCON_API_KEY=${{secrets.VCON_API_KEY}}
    - run:  make -C tutorials/mqtt/mqtt-client/microchip/same54-xpro test VCON_API_KEY=${{secrets.VCON_API_KEY}}

  test_pico_w5500:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 2 }
    - name: SDK
      run: sudo apt -y update && sudo apt -y install gcc-arm-none-eabi
    - run:  make -C tutorials/pico-sdk/w5500-evb-pico-picosdk-baremetal-builtin test VCON_API_KEY=${{secrets.VCON_API_KEY}}

